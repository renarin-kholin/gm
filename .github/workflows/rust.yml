name: Rust

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings

jobs:
  fmt:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    name: fmt (${{ matrix.os }})
    steps:
      - uses: actions/checkout@v4
      - run: cargo fmt --all -- --check

  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    name: build (${{ matrix.os }})
    steps:
      - uses: actions/checkout@v4
      - run: cargo build --verbose

  build-demo:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    name: build-demo (${{ matrix.os }})
    steps:
      - uses: actions/checkout@v4
      - run: cargo build --features demo --verbose

  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    name: test (${{ matrix.os }})
    steps:
      - uses: actions/checkout@v4
      - run: cargo test --verbose

  clippy:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    name: clippy (${{ matrix.os }})
    steps:
      - uses: actions/checkout@v4
      - run: cargo clippy -- -D warnings

  gm_log:
    runs-on: ubuntu-latest
    name: no gm_log allowed
    steps:
      - uses: actions/checkout@v4
      - run: |
          if grep -R --exclude-dir=target --exclude-dir=.git --exclude=*.lock "gm_log!" .; then
              echo "Found gm_log! macro used in the codebase"
              exit 1
          fi
